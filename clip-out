#!/usr/bin/env bash
set -o errexit


help_doc() {
	{ read -r -d '' || :; [[ $REPLY == '|'* ]] && REPLY=${REPLY:1}; printf '%s' "${REPLY//$'\n|'/$'\n'}"; } <<-'HelpDoc'
		|clip-out [ARGUEMENT...]
		|
		|Writes system clipboard to stdout using the appropriate command for the environment.

		|ARGUEMENT
		|	-r          Remove all trailing newlines from output
		|	-h|--help   Print help doc

		|DEPENDENCIES
		|	Environments
		|		X11       xclip || xsel
		|		Wayland   wl-paste
		|		Termux    termux-clipboard-get
		|
		|	Note: termux-clipboard-get will hang unless the Termux:API addon is installed.
		|
		|	ARGUEMENTs
		|		-r   tr

		|EXAMPLES
		|	# Write clipboard to a file
		|	clip-out > clipboard.txt

	HelpDoc
	[[ $1 ]] && exit "$1"
}



print_stderr() {
	if [[ $1 == '0' ]]; then
		[[ $2 ]] && printf "$2" "${@:3}" 1>&2
	else
		[[ $2 ]] && printf '%s'"$2" "ERROR: ${0##*/}, " "${@:3}" 1>&2
		exit "$1"
	fi
}



remove_trailing_nl=
while [[ $1 ]]; do
	case $1 in
		'-r')
			remove_trailing_nl=1 ;;
		'--help'|'-h')
			help_doc 0 ;;
		*)
			print_stderr 1 '%s\n' 'unrecognized parameter: '"$1" ;;
	esac
	shift
done



# Check dependencies and define clipboard function based on environment
for _ in :; do
	# Wayland
	if [[ $WAYLAND_DISPLAY ]]; then
		type wl-paste 1>/dev/null
		clipboard() {
			wl-paste
		}
		break
	fi


	# Termux
	if [[ $SHELL == *'com.termux'* ]]; then
		type termux-clipboard-get 1>/dev/null
		clipboard() {
			termux-clipboard-get
		}
		break
	fi


	# X11
	if [[ $DISPLAY ]]; then
		if type xclip &> /dev/null; then
			clipboard() {
				xclip -selection clipboard -out
			}
			break
		fi

		if type xsel &> /dev/null; then
			clipboard() {
				xsel --clipboard --output
			}
			break
		fi

		print_stderr 1 'missing dependency: xsel or xclip'
	fi


	print_stderr 1 '%s\n' 'no eligible environment found'
done



if [[ $remove_trailing_nl ]]; then
	tr -d '\n' < <(clipboard)
else
	clipboard
fi



